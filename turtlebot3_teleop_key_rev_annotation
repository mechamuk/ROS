#!/usr/bin/env python
# Copyright (c) 2011, Willow Garage, Inc.
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#    * Redistributions of source code must retain the above copyright
#      notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright
#      notice, this list of conditions and the following disclaimer in the
#      documentation and/or other materials provided with the distribution.
#    * Neither the name of the Willow Garage, Inc. nor the names of its
#      contributors may be used to endorse or promote products derived from
#       this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

import rospy				#ros에 관한 파이썬 라이브러리를 가져온다
from geometry_msgs.msg import Twist	#속도 관련 raw message 정의 라이브러리를 가져온다.
import sys, select, os			#sys, select, os 라이브러리를 가져온다.
if os.name == 'nt':			#os.name이 nt(windows or mac)이면 msvcrt 라이브러리를 가져온다.
  import msvcrt
else:					#아닐 경우 tty,termios 라이브러리를 가져온다.
  import tty, termios
					# 변수를 선언한다.
BURGER_MAX_LIN_VEL = 0.22		#버거의 최대 속도
BURGER_MAX_ANG_VEL = 2.84		#버거의 최대 각속도

WAFFLE_MAX_LIN_VEL = 0.26		#와플의 최대 속도
WAFFLE_MAX_ANG_VEL = 1.82		#와플의 최대 각속도
					#가속도,각가속도 관련 변수
LIN_VEL_STEP_SIZE = 0.01		#LIN_VEL_STEP_SIZE/2.0씩 값을 바꿔준다.
ANG_VEL_STEP_SIZE = 0.1			#ANG_VEL_STEP_SIZE/2.0씩 값을 바꿔준다.
					# 키 관련 메시지
msg = """
Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity (Burger : ~ 0.22, Waffle and Waffle Pi : ~ 0.26)
a/d : increase/decrease angular velocity (Burger : ~ 2.84, Waffle and Waffle Pi : ~ 1.82)

space key, s : force stop

CTRL-C to quit
"""
					#에러 관련 메시지
e = """
Communications Failed
"""

def getKey():						#OS에 따라 눌린 키를 입력받는 함수
    if os.name == 'nt':					#운영체제 모듈의 이름이 'nt'인 경우
      return msvcrt.getch()				#눌린 키를 읽고 바이트 문자열로 리턴한다.

    tty.setraw(sys.stdin.fileno())			#sys.stdin.fileno()를 raw로 변경
    rlist, _, _ = select.select([sys.stdin], [], [], 0.3)	#읽을 준비가 될 때 까지 기다림
    if rlist:						#준비 완료되면 key에 눌린 데이터를 저장
        key = sys.stdin.read(1)
    else:
        key = ''					#아닐 경우 ''저장

    termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)	#tcgetattr()에서 반환된 목록과 같은 속성에서 sys.stdin의 tty 속성을 설정, 계류 중인 모든 출력을 전송한 후에 변경
    return key						#key 를 반환한다.

def vels(target_linear_vel, target_angular_vel):	#현재 속도와 각속도를 출력
    return "currently:\tlinear vel %s\t angular vel %s " % (target_linear_vel,target_angular_vel)

def makeSimpleProfile(output, input, slop):		#현재속도를 타겟속도로 변환
    if input > output:					#현재속도가 더 높을경우 타겟속도에서 slop를 더한 값과 현재 속도 중에 낮은 값으로 설정
        output = min( input, output + slop )
    elif input < output:				#타겟 속도가 더 높을경우 타겟속도에서 slop를 뺀 값과 현재 속도 중에 높은 값으로 설정
        output = max( input, output - slop )
    else:						#나머지 경우 그대로 유지
        output = input

    return output					#현재 속도를 반환

def constrain(input, low, high):			#로봇의 최고,최저 속도 및 가속도 설정
    if input < low:					#최저속도 제한
      input = low
    elif input > high:					#최고속도제한
      input = high
    else:						#나머지 경우 그대로 유지
      input = input

    return input

def checkLinearLimitVelocity(vel):			#속도 제한 설정
    if turtlebot3_model == "burger":			#버거인 경우 +-BURGER_MAX_LIN_VEL가 최대최소
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":	#와플인 경우 +-WAFFLE_MAX_LIN_VEL가 최대최소
      vel = constrain(vel, -WAFFLE_MAX_LIN_VEL, WAFFLE_MAX_LIN_VEL)
    else:						#나머지 경우 +-BURGER_MAX_LIN_VEL가 최대최소
      vel = constrain(vel, -BURGER_MAX_LIN_VEL, BURGER_MAX_LIN_VEL)

    return vel
							#각속도 제한 설정
def checkAngularLimitVelocity(vel):
    if turtlebot3_model == "burger":			#버거인 경우 +-BURGER_MAX_ANG_VEL가 최대최소
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)
    elif turtlebot3_model == "waffle" or turtlebot3_model == "waffle_pi":	#와플인 경우 +-WAFFLE_MAX_ANG_VEL가 최대최소
      vel = constrain(vel, -WAFFLE_MAX_ANG_VEL, WAFFLE_MAX_ANG_VEL)
    else:						#나머지 경우 +-BURGER_MAX_ANG_VEL가 최대최소
      vel = constrain(vel, -BURGER_MAX_ANG_VEL, BURGER_MAX_ANG_VEL)

    return vel

if __name__=="__main__":		#파이썬 인터프리터로 실행했을 경우 __name__은 __main__이 된다.
    if os.name != 'nt':			#windows나 mac이 아닌 경우 실행
        settings = termios.tcgetattr(sys.stdin)		#sys.stdin의 tty의 속성을 포함하는 목록을 setting에 입력

    rospy.init_node('turtlebot3_teleop')		#turtlebot3_teleop라는 이름의 노드를 만든다.
    pub = rospy.Publisher('cmd_vel', Twist, queue_size=10)	#rospy를 이용하여 topic에 메시지를 보낼 핸들을 만든다. topic 이름은 cmd_vel이고, 메시지는 Twist, 사이즈는 queue_size이다

    turtlebot3_model = rospy.get_param("model", "burger")#파라미터 서버에서 model, burger의 리스트를 turtlebot3_model에 입력

    flag = 0				#바로 멈추지 않도록 하기 위해 설정
    status = 0				#상태값 초기화
    target_linear_vel   = 0.0		#속도 및 가속도 관련 변수 초기화
    target_angular_vel  = 0.0
    control_linear_vel  = 0.0
    control_angular_vel = 0.0

    try:
        print(msg)			#msg 출력
        while(1):			#반복문
            key = getKey()		#눌린 키보드 값을 받음
            if key == 'w' :		#w가 눌리면 타겟속도를 LIN_VEL_STEP_SIZE만큼 증가
                target_linear_vel = checkLinearLimitVelocity(target_linear_vel + LIN_VEL_STEP_SIZE)
                status = status + 1
		target_angular_vel  = 0.0	#직진이 가능하도록 각속도 초기화
		flag = 0
                print(vels(target_linear_vel,target_angular_vel))	#현재 속도, 각속도 출력
            elif key == 'x' :		#w가 눌리면 타겟속도를 LIN_VEL_STEP_SIZE만큼 감소
                target_linear_vel = checkLinearLimitVelocity(target_linear_vel - LIN_VEL_STEP_SIZE)
                status = status + 1
		target_angular_vel  = 0.0	#직진이 가능하도록 각속도 초기화
		flag = 0
                print(vels(target_linear_vel,target_angular_vel))	#현재 속도, 각속도 출력
            elif key == 'a' :		#a가 눌리면 타겟 각속도를 ANG_VEL_STEP_SIZE만큼 증가
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel + ANG_VEL_STEP_SIZE)
                status = status + 1
		flag = 0
                print(vels(target_linear_vel,target_angular_vel))	#현재 속도, 각속도 출력
            elif key == 'd' :		#d가 눌리면 타겟 각속도를 ANG_VEL_STEP_SIZE만큼 감소
                target_angular_vel = checkAngularLimitVelocity(target_angular_vel - ANG_VEL_STEP_SIZE)
                status = status + 1
		flag = 0
                print(vels(target_linear_vel,target_angular_vel))	#현재 속도, 각속도 출력
            elif key == ' ' or key == 's' :	#' '나 s가 눌리면 속도, 각속도 관련 변수 초기화
                target_linear_vel   = 0.0
                control_linear_vel  = 0.0
                target_angular_vel  = 0.0
                control_angular_vel = 0.0
		flag = 0
                print(vels(target_linear_vel, target_angular_vel))	#현재 속도, 각속도 출력
            else:
		if flag >= 5 :			#5회 이상 키보드가 안눌리면 속도, 각속도 관련 변수 초기화
			target_linear_vel   = 0.0
	                control_linear_vel  = 0.0
	                target_angular_vel  = 0.0
	                control_angular_vel = 0.0
                if (key == '\x03'):		#ctrl + c가 눌리면 종료
                    break
	    flag = flag + 1
            if status == 20 :			#status가 20이 되면 초기화
                print(msg)			#msg 출력
                status = 0

            twist = Twist()			# 속도 관련 메시지
						#메시지에 속도, 각속도 입력
            control_linear_vel = makeSimpleProfile(control_linear_vel, target_linear_vel, (LIN_VEL_STEP_SIZE/2.0))
            twist.linear.x = control_linear_vel; twist.linear.y = 0.0; twist.linear.z = 0.0

            control_angular_vel = makeSimpleProfile(control_angular_vel, target_angular_vel, (ANG_VEL_STEP_SIZE/2.0))
            twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = control_angular_vel

            pub.publish(twist)			#속도, 각속도 메시지 송신

    except:
        print(e)

    finally:
        twist = Twist()				#속도, 각속도 입력 초기화
        twist.linear.x = 0.0; twist.linear.y = 0.0; twist.linear.z = 0.0
        twist.angular.x = 0.0; twist.angular.y = 0.0; twist.angular.z = 0.0
        pub.publish(twist)			#속도, 각속도 메시지 송신

    if os.name != 'nt':			#windows나 mac이 아닌 경우 실행
        termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)	#tcgetattr()에서 반환된 목록과 같은 속성에서 sys.stdin의 tty 속성을 설정
